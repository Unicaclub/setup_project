# Docker Compose para CryptoTradeBotGlobal
# Sistema de Trading de Criptomoedas - Português Brasileiro

version: '3.8'
version: '3.9'

services:
  db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: cryptotradebotglobal
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    profiles: ["dev", "prod"]

  redis:
    image: redis:7
    restart: always
    ports:
      - "6379:6379"
    profiles: ["dev", "prod"]

  api:
    build:
      context: .
      dockerfile: Dockerfile
    command: uvicorn src.api.main:app --host 0.0.0.0 --port 8000 --reload
    environment:
      DATABASE_URL: postgresql+psycopg2://postgres:postgres@db:5432/cryptotradebotglobal
      JWT_SECRET: supersecretkey
      STRIPE_SECRET_KEY: sk_test_123
      STRIPE_WEBHOOK_SECRET: whsec_test
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    profiles: ["dev", "prod"]

  streamlit:
    build:
      context: .
      dockerfile: Dockerfile
    command: streamlit run src/api/streamlit_sso.py --server.port 8501
    environment:
      API_URL: http://api:8000
    ports:
      - "8501:8501"
    depends_on:
      - api
    profiles: ["dev", "prod"]

  admin:
    build:
      context: .
      dockerfile: Dockerfile
    command: uvicorn src.api.admin_panel:app --host 0.0.0.0 --port 8080
    environment:
      DATABASE_URL: postgresql+psycopg2://postgres:postgres@db:5432/cryptotradebotglobal
    ports:
      - "8080:8080"
    depends_on:
      - db
    profiles: ["dev", "prod"]

volumes:
  pgdata:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Prometheus para métricas
  prometheus:
    image: prom/prometheus:latest
    container_name: cryptobot-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - cryptobot-network

  # Grafana para visualização
  grafana:
    image: grafana/grafana:latest
    container_name: cryptobot-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - cryptobot-network
    depends_on:
      - prometheus

  # Nginx como proxy reverso
  nginx:
    image: nginx:alpine
    container_name: cryptobot-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - cryptobot
      - grafana
    networks:
      - cryptobot-network

# Volumes persistentes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Rede personalizada
networks:
  cryptobot-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
