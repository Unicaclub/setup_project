"""
Gestor de Risco - CryptoTradeBotGlobal
Sistema de Trading de Criptomoedas - Portugu√™s Brasileiro
"""

import asyncio
from datetime import datetime, timedelta
from decimal import Decimal
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass
from enum import Enum
import json

from src.utils.logger import obter_logger, log_performance
from src.utils.alertas import criar_gerenciador_alertas


class TipoRisco(Enum):
    """Tipos de risco monitorados"""
    DRAWDOWN = "drawdown"
    PERDA_DIARIA = "perda_diaria"
    POSICAO_MAXIMA = "posicao_maxima"
    VOLATILIDADE = "volatilidade"
    CORRELACAO = "correlacao"
    LIQUIDEZ = "liquidez"


class StatusRisco(Enum):
    """Status do risco"""
    BAIXO = "baixo"
    MEDIO = "medio"
    ALTO = "alto"
    CRITICO = "critico"


@dataclass
class AlertaRisco:
    """Estrutura de um alerta de risco"""
    tipo: TipoRisco
    nivel: StatusRisco
    valor_atual: Decimal
    limite: Decimal
    simbolo: Optional[str] = None
    timestamp: datetime = None
    
    def __post_init__(self):
        if self.timestamp is None:
            self.timestamp = datetime.now()


@dataclass
class ParametrosRisco:
    """Par√¢metros de configura√ß√£o de risco"""
    # Limites de drawdown
    drawdown_maximo: Decimal = Decimal('0.15')  # 15%
    drawdown_alerta: Decimal = Decimal('0.10')  # 10%
    
    # Limites de perda di√°ria
    perda_diaria_maxima: Decimal = Decimal('500.0')  # $500
    perda_diaria_alerta: Decimal = Decimal('300.0')  # $300
    
    # Tamanho m√°ximo de posi√ß√£o
    posicao_maxima_usd: Decimal = Decimal('1000.0')  # $1000
    posicao_maxima_percentual: Decimal = Decimal('0.20')  # 20% do portfolio
    
    # Stop loss e take profit
    stop_loss_padrao: Decimal = Decimal('0.03')  # 3%
    take_profit_padrao: Decimal = Decimal('0.06')  # 6%
    
    # Limites de volatilidade
    volatilidade_maxima: Decimal = Decimal('0.05')  # 5% por hora
    
    # N√∫mero m√°ximo de posi√ß√µes simult√¢neas
    max_posicoes_simultaneas: int = 3
    
    # Correla√ß√£o m√°xima entre posi√ß√µes
    correlacao_maxima: Decimal = Decimal('0.70')  # 70%


class GestorRisco:
    """
    Gestor de Risco Avan√ßado
    Monitora e controla todos os aspectos de risco do sistema de trading
    """
    
    def __init__(self, parametros: ParametrosRisco = None, config_alertas: Dict = None):
        """
        Inicializa o gestor de risco
        
        Args:
            parametros: Par√¢metros de configura√ß√£o de risco
            config_alertas: Configura√ß√£o do sistema de alertas
        """
        self.logger = obter_logger(__name__)
        self.parametros = parametros or ParametrosRisco()
        
        # Sistema de alertas
        self.alertas_manager = None
        if config_alertas:
            self.alertas_manager = criar_gerenciador_alertas(config_alertas)
        
        # Estado do sistema
        self.portfolio_inicial = Decimal('10000.0')  # Valor inicial do portfolio
        self.portfolio_atual = self.portfolio_inicial
        self.pico_portfolio = self.portfolio_inicial
        self.perda_diaria_atual = Decimal('0.0')
        self.data_atual = datetime.now().date()
        
        # Posi√ß√µes ativas
        self.posicoes_ativas: Dict[str, Dict] = {}
        
        # Hist√≥rico de riscos
        self.historico_drawdown: List[Dict] = []
        self.historico_perdas_diarias: List[Dict] = []
        self.alertas_enviados: List[AlertaRisco] = []
        
        # Estat√≠sticas
        self.total_alertas_risco = 0
        self.paradas_emergencia = 0
        self.trades_rejeitados = 0
        
        # Status do sistema
        self.sistema_ativo = True
        self.modo_emergencia = False
        
        self.logger.info("üõ°Ô∏è Gestor de Risco inicializado")
        self.logger.info(f"  ‚Ä¢ Drawdown m√°ximo: {self.parametros.drawdown_maximo:.1%}")
        self.logger.info(f"  ‚Ä¢ Perda di√°ria m√°xima: ${self.parametros.perda_diaria_maxima}")
        self.logger.info(f"  ‚Ä¢ Posi√ß√£o m√°xima: ${self.parametros.posicao_maxima_usd}")
    
    @log_performance
    async def avaliar_risco_trade(self, simbolo: str, tipo: str, quantidade: Decimal, 
                                 preco: Decimal) -> Tuple[bool, List[str]]:
        """
        Avalia o risco de um trade antes da execu√ß√£o
        
        Args:
            simbolo: S√≠mbolo do ativo
            tipo: Tipo do trade (COMPRAR/VENDER)
            quantidade: Quantidade do trade
            preco: Pre√ßo do trade
            
        Returns:
            Tuple[bool, List[str]]: (aprovado, motivos_rejeicao)
        """
        try:
            motivos_rejeicao = []
            
            # Verificar se sistema est√° ativo
            if not self.sistema_ativo:
                motivos_rejeicao.append("Sistema de trading desativado por risco")
                return False, motivos_rejeicao
            
            # Verificar modo emerg√™ncia
            if self.modo_emergencia:
                motivos_rejeicao.append("Sistema em modo emerg√™ncia")
                return False, motivos_rejeicao
            
            # Calcular valor do trade
            valor_trade = quantidade * preco
            
            # Verificar tamanho m√°ximo da posi√ß√£o
            if valor_trade > self.parametros.posicao_maxima_usd:
                motivos_rejeicao.append(f"Valor do trade (${valor_trade}) excede limite m√°ximo (${self.parametros.posicao_maxima_usd})")
            
            # Verificar percentual m√°ximo do portfolio
            percentual_portfolio = valor_trade / self.portfolio_atual
            if percentual_portfolio > self.parametros.posicao_maxima_percentual:
                motivos_rejeicao.append(f"Trade representa {percentual_portfolio:.1%} do portfolio (m√°ximo: {self.parametros.posicao_maxima_percentual:.1%})")
            
            # Verificar n√∫mero m√°ximo de posi√ß√µes
            if len(self.posicoes_ativas) >= self.parametros.max_posicoes_simultaneas:
                motivos_rejeicao.append(f"N√∫mero m√°ximo de posi√ß√µes simult√¢neas atingido ({self.parametros.max_posicoes_simultaneas})")
            
            # Verificar drawdown atual
            drawdown_atual = await self._calcular_drawdown()
            if drawdown_atual >= self.parametros.drawdown_maximo:
                motivos_rejeicao.append(f"Drawdown atual ({drawdown_atual:.1%}) excede limite m√°ximo ({self.parametros.drawdown_maximo:.1%})")
            
            # Verificar perda di√°ria
            if self.perda_diaria_atual >= self.parametros.perda_diaria_maxima:
                motivos_rejeicao.append(f"Perda di√°ria atual (${self.perda_diaria_atual}) excede limite m√°ximo (${self.parametros.perda_diaria_maxima})")
            
            # Verificar correla√ß√£o com posi√ß√µes existentes
            if await self._verificar_correlacao_alta(simbolo):
                motivos_rejeicao.append(f"Alta correla√ß√£o com posi√ß√µes existentes")
            
            aprovado = len(motivos_rejeicao) == 0
            
            if not aprovado:
                self.trades_rejeitados += 1
                self.logger.warning(f"üö´ Trade rejeitado: {simbolo} {tipo} {quantidade} @ {preco}")
                for motivo in motivos_rejeicao:
                    self.logger.warning(f"  ‚Ä¢ {motivo}")
            
            return aprovado, motivos_rejeicao
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao avaliar risco do trade: {str(e)}")
            return False, [f"Erro interno: {str(e)}"]
    
    @log_performance
    async def atualizar_portfolio(self, novo_valor: Decimal):
        """
        Atualiza o valor do portfolio e monitora riscos
        
        Args:
            novo_valor: Novo valor do portfolio
        """
        try:
            valor_anterior = self.portfolio_atual
            self.portfolio_atual = novo_valor
            
            # Atualizar pico do portfolio
            if novo_valor > self.pico_portfolio:
                self.pico_portfolio = novo_valor
            
            # Calcular mudan√ßa
            mudanca = novo_valor - valor_anterior
            
            # Atualizar perda di√°ria
            data_hoje = datetime.now().date()
            if data_hoje != self.data_atual:
                # Novo dia - resetar perda di√°ria
                self.data_atual = data_hoje
                self.perda_diaria_atual = Decimal('0.0')
            
            if mudanca < 0:
                self.perda_diaria_atual += abs(mudanca)
            
            # Verificar alertas de risco
            await self._verificar_alertas_risco()
            
            # Atualizar hist√≥rico
            await self._atualizar_historico()
            
            self.logger.debug(f"üìä Portfolio atualizado: ${novo_valor} (mudan√ßa: ${mudanca:+})")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao atualizar portfolio: {str(e)}")
    
    async def adicionar_posicao(self, simbolo: str, tipo: str, quantidade: Decimal, 
                              preco_entrada: Decimal, stop_loss: Decimal = None, 
                              take_profit: Decimal = None):
        """
        Adiciona uma nova posi√ß√£o ao monitoramento
        
        Args:
            simbolo: S√≠mbolo do ativo
            tipo: Tipo da posi√ß√£o (LONG/SHORT)
            quantidade: Quantidade da posi√ß√£o
            preco_entrada: Pre√ßo de entrada
            stop_loss: Pre√ßo de stop loss
            take_profit: Pre√ßo de take profit
        """
        try:
            # Calcular stop loss e take profit padr√£o se n√£o fornecidos
            if stop_loss is None:
                if tipo == "LONG":
                    stop_loss = preco_entrada * (1 - self.parametros.stop_loss_padrao)
                else:
                    stop_loss = preco_entrada * (1 + self.parametros.stop_loss_padrao)
            
            if take_profit is None:
                if tipo == "LONG":
                    take_profit = preco_entrada * (1 + self.parametros.take_profit_padrao)
                else:
                    take_profit = preco_entrada * (1 - self.parametros.take_profit_padrao)
            
            posicao = {
                'simbolo': simbolo,
                'tipo': tipo,
                'quantidade': quantidade,
                'preco_entrada': preco_entrada,
                'stop_loss': stop_loss,
                'take_profit': take_profit,
                'valor_inicial': quantidade * preco_entrada,
                'timestamp_abertura': datetime.now(),
                'pnl_atual': Decimal('0.0')
            }
            
            self.posicoes_ativas[simbolo] = posicao
            
            self.logger.info(f"üìà Posi√ß√£o adicionada: {simbolo} {tipo} {quantidade} @ {preco_entrada}")
            self.logger.info(f"  ‚Ä¢ Stop Loss: {stop_loss}")
            self.logger.info(f"  ‚Ä¢ Take Profit: {take_profit}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao adicionar posi√ß√£o: {str(e)}")
    
    async def remover_posicao(self, simbolo: str, preco_saida: Decimal):
        """
        Remove uma posi√ß√£o do monitoramento
        
        Args:
            simbolo: S√≠mbolo do ativo
            preco_saida: Pre√ßo de sa√≠da
        """
        try:
            if simbolo not in self.posicoes_ativas:
                self.logger.warning(f"‚ö†Ô∏è Tentativa de remover posi√ß√£o inexistente: {simbolo}")
                return
            
            posicao = self.posicoes_ativas[simbolo]
            
            # Calcular P&L final
            if posicao['tipo'] == "LONG":
                pnl = (preco_saida - posicao['preco_entrada']) * posicao['quantidade']
            else:
                pnl = (posicao['preco_entrada'] - preco_saida) * posicao['quantidade']
            
            # Remover posi√ß√£o
            del self.posicoes_ativas[simbolo]
            
            self.logger.info(f"üìâ Posi√ß√£o removida: {simbolo}")
            self.logger.info(f"  ‚Ä¢ P&L: ${pnl:+}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao remover posi√ß√£o: {str(e)}")
    
    async def atualizar_posicoes(self, precos_atuais: Dict[str, Decimal]):
        """
        Atualiza P&L das posi√ß√µes ativas
        
        Args:
            precos_atuais: Dicion√°rio com pre√ßos atuais dos s√≠mbolos
        """
        try:
            for simbolo, posicao in self.posicoes_ativas.items():
                if simbolo in precos_atuais:
                    preco_atual = precos_atuais[simbolo]
                    
                    # Calcular P&L atual
                    if posicao['tipo'] == "LONG":
                        pnl = (preco_atual - posicao['preco_entrada']) * posicao['quantidade']
                    else:
                        pnl = (posicao['preco_entrada'] - preco_atual) * posicao['quantidade']
                    
                    posicao['pnl_atual'] = pnl
                    
                    # Verificar stop loss e take profit
                    await self._verificar_stop_loss_take_profit(simbolo, preco_atual)
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao atualizar posi√ß√µes: {str(e)}")
    
    async def _calcular_drawdown(self) -> Decimal:
        """Calcula o drawdown atual"""
        if self.pico_portfolio == 0:
            return Decimal('0.0')
        
        drawdown = (self.pico_portfolio - self.portfolio_atual) / self.pico_portfolio
        return max(drawdown, Decimal('0.0'))
    
    async def _verificar_alertas_risco(self):
        """Verifica e envia alertas de risco"""
        try:
            alertas = []
            
            # Verificar drawdown
            drawdown_atual = await self._calcular_drawdown()
            
            if drawdown_atual >= self.parametros.drawdown_maximo:
                alertas.append(AlertaRisco(
                    tipo=TipoRisco.DRAWDOWN,
                    nivel=StatusRisco.CRITICO,
                    valor_atual=drawdown_atual,
                    limite=self.parametros.drawdown_maximo
                ))
            elif drawdown_atual >= self.parametros.drawdown_alerta:
                alertas.append(AlertaRisco(
                    tipo=TipoRisco.DRAWDOWN,
                    nivel=StatusRisco.ALTO,
                    valor_atual=drawdown_atual,
                    limite=self.parametros.drawdown_alerta
                ))
            
            # Verificar perda di√°ria
            if self.perda_diaria_atual >= self.parametros.perda_diaria_maxima:
                alertas.append(AlertaRisco(
                    tipo=TipoRisco.PERDA_DIARIA,
                    nivel=StatusRisco.CRITICO,
                    valor_atual=self.perda_diaria_atual,
                    limite=self.parametros.perda_diaria_maxima
                ))
            elif self.perda_diaria_atual >= self.parametros.perda_diaria_alerta:
                alertas.append(AlertaRisco(
                    tipo=TipoRisco.PERDA_DIARIA,
                    nivel=StatusRisco.ALTO,
                    valor_atual=self.perda_diaria_atual,
                    limite=self.parametros.perda_diaria_alerta
                ))
            
            # Processar alertas
            for alerta in alertas:
                await self._processar_alerta_risco(alerta)
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao verificar alertas de risco: {str(e)}")
    
    async def _processar_alerta_risco(self, alerta: AlertaRisco):
        """Processa um alerta de risco"""
        try:
            self.alertas_enviados.append(alerta)
            self.total_alertas_risco += 1
            
            # Log do alerta
            if alerta.nivel == StatusRisco.CRITICO:
                self.logger.critical(f"üö® ALERTA CR√çTICO DE RISCO: {alerta.tipo.value}")
                self.logger.critical(f"  ‚Ä¢ Valor atual: {alerta.valor_atual}")
                self.logger.critical(f"  ‚Ä¢ Limite: {alerta.limite}")
            else:
                self.logger.warning(f"‚ö†Ô∏è Alerta de risco: {alerta.tipo.value}")
                self.logger.warning(f"  ‚Ä¢ Valor atual: {alerta.valor_atual}")
                self.logger.warning(f"  ‚Ä¢ Limite: {alerta.limite}")
            
            # Enviar alerta via sistema de alertas
            if self.alertas_manager:
                titulo = f"Alerta de Risco - {alerta.tipo.value.title()}"
                mensagem = f"N√≠vel: {alerta.nivel.value.upper()}\n"
                mensagem += f"Valor atual: {alerta.valor_atual}\n"
                mensagem += f"Limite: {alerta.limite}"
                
                dados_extras = {
                    'tipo_risco': alerta.tipo.value,
                    'nivel': alerta.nivel.value,
                    'valor_atual': str(alerta.valor_atual),
                    'limite': str(alerta.limite),
                    'portfolio_atual': str(self.portfolio_atual)
                }
                
                if alerta.nivel == StatusRisco.CRITICO:
                    await self.alertas_manager.alerta_critical(titulo, mensagem, dados_extras)
                else:
                    await self.alertas_manager.alerta_risco(titulo, mensagem, dados_extras)
            
            # A√ß√µes autom√°ticas para alertas cr√≠ticos
            if alerta.nivel == StatusRisco.CRITICO:
                await self._ativar_modo_emergencia(alerta)
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao processar alerta de risco: {str(e)}")
    
    async def _ativar_modo_emergencia(self, alerta: AlertaRisco):
        """Ativa modo emerg√™ncia do sistema"""
        try:
            self.modo_emergencia = True
            self.paradas_emergencia += 1
            
            self.logger.critical("üö® MODO EMERG√äNCIA ATIVADO")
            self.logger.critical(f"  ‚Ä¢ Motivo: {alerta.tipo.value}")
            self.logger.critical("  ‚Ä¢ Todas as opera√ß√µes de trading foram suspensas")
            
            # Fechar todas as posi√ß√µes (se configurado)
            # await self._fechar_todas_posicoes()
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao ativar modo emerg√™ncia: {str(e)}")
    
    async def _verificar_correlacao_alta(self, simbolo: str) -> bool:
        """Verifica se h√° alta correla√ß√£o com posi√ß√µes existentes"""
        # Implementa√ß√£o simplificada - em produ√ß√£o, usar dados hist√≥ricos reais
        simbolos_correlacionados = {
            'BTC/USDT': ['ETH/USDT'],
            'ETH/USDT': ['BTC/USDT'],
        }
        
        simbolos_ativos = set(self.posicoes_ativas.keys())
        simbolos_correlatos = set(simbolos_correlacionados.get(simbolo, []))
        
        return len(simbolos_ativos.intersection(simbolos_correlatos)) > 0
    
    async def _verificar_stop_loss_take_profit(self, simbolo: str, preco_atual: Decimal):
        """Verifica se stop loss ou take profit foram atingidos"""
        try:
            posicao = self.posicoes_ativas[simbolo]
            
            atingiu_stop = False
            atingiu_take_profit = False
            
            if posicao['tipo'] == "LONG":
                atingiu_stop = preco_atual <= posicao['stop_loss']
                atingiu_take_profit = preco_atual >= posicao['take_profit']
            else:
                atingiu_stop = preco_atual >= posicao['stop_loss']
                atingiu_take_profit = preco_atual <= posicao['take_profit']
            
            if atingiu_stop:
                self.logger.warning(f"üõë Stop Loss atingido: {simbolo} @ {preco_atual}")
                # Aqui seria enviado sinal para fechar posi√ß√£o
                
            elif atingiu_take_profit:
                self.logger.info(f"üéØ Take Profit atingido: {simbolo} @ {preco_atual}")
                # Aqui seria enviado sinal para fechar posi√ß√£o
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao verificar stop loss/take profit: {str(e)}")
    
    async def _atualizar_historico(self):
        """Atualiza hist√≥rico de riscos"""
        try:
            agora = datetime.now()
            
            # Hist√≥rico de drawdown
            drawdown_atual = await self._calcular_drawdown()
            self.historico_drawdown.append({
                'timestamp': agora,
                'drawdown': float(drawdown_atual),
                'portfolio_valor': float(self.portfolio_atual),
                'pico_portfolio': float(self.pico_portfolio)
            })
            
            # Manter apenas √∫ltimos 1000 registros
            if len(self.historico_drawdown) > 1000:
                self.historico_drawdown = self.historico_drawdown[-1000:]
            
            # Hist√≥rico de perdas di√°rias
            if agora.hour == 0 and agora.minute == 0:  # Meia-noite
                self.historico_perdas_diarias.append({
                    'data': agora.date(),
                    'perda_diaria': float(self.perda_diaria_atual)
                })
                
                # Manter apenas √∫ltimos 30 dias
                if len(self.historico_perdas_diarias) > 30:
                    self.historico_perdas_diarias = self.historico_perdas_diarias[-30:]
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao atualizar hist√≥rico: {str(e)}")
    
    async def obter_status_risco(self) -> Dict[str, Any]:
        """
        Obt√©m status atual do sistema de risco
        
        Returns:
            Dicion√°rio com status completo do risco
        """
        try:
            drawdown_atual = await self._calcular_drawdown()
            
            # Calcular P&L total das posi√ß√µes
            pnl_total_posicoes = sum(pos['pnl_atual'] for pos in self.posicoes_ativas.values())
            
            return {
                'sistema_ativo': self.sistema_ativo,
                'modo_emergencia': self.modo_emergencia,
                'portfolio': {
                    'valor_atual': float(self.portfolio_atual),
                    'valor_inicial': float(self.portfolio_inicial),
                    'pico_valor': float(self.pico_portfolio),
                    'pnl_total': float(self.portfolio_atual - self.portfolio_inicial),
                    'pnl_percentual': float((self.portfolio_atual - self.portfolio_inicial) / self.portfolio_inicial * 100)
                },
                'drawdown': {
                    'atual': float(drawdown_atual),
                    'limite_alerta': float(self.parametros.drawdown_alerta),
                    'limite_maximo': float(self.parametros.drawdown_maximo),
                    'status': 'CR√çTICO' if drawdown_atual >= self.parametros.drawdown_maximo else 
                             'ALTO' if drawdown_atual >= self.parametros.drawdown_alerta else 'NORMAL'
                },
                'perda_diaria': {
                    'atual': float(self.perda_diaria_atual),
                    'limite_alerta': float(self.parametros.perda_diaria_alerta),
                    'limite_maximo': float(self.parametros.perda_diaria_maxima),
                    'data': self.data_atual.isoformat(),
                    'status': 'CR√çTICO' if self.perda_diaria_atual >= self.parametros.perda_diaria_maxima else
                             'ALTO' if self.perda_diaria_atual >= self.parametros.perda_diaria_alerta else 'NORMAL'
                },
                'posicoes': {
                    'total_ativas': len(self.posicoes_ativas),
                    'limite_maximo': self.parametros.max_posicoes_simultaneas,
                    'pnl_total': float(pnl_total_posicoes),
                    'detalhes': [
                        {
                            'simbolo': pos['simbolo'],
                            'tipo': pos['tipo'],
                            'quantidade': float(pos['quantidade']),
                            'preco_entrada': float(pos['preco_entrada']),
                            'pnl_atual': float(pos['pnl_atual']),
                            'stop_loss': float(pos['stop_loss']),
                            'take_profit': float(pos['take_profit'])
                        }
                        for pos in self.posicoes_ativas.values()
                    ]
                },
                'parametros': {
                    'drawdown_maximo': float(self.parametros.drawdown_maximo),
                    'perda_diaria_maxima': float(self.parametros.perda_diaria_maxima),
                    'posicao_maxima_usd': float(self.parametros.posicao_maxima_usd),
                    'stop_loss_padrao': float(self.parametros.stop_loss_padrao),
                    'take_profit_padrao': float(self.parametros.take_profit_padrao)
                },
                'estatisticas': {
                    'total_alertas_risco': self.total_alertas_risco,
                    'paradas_emergencia': self.paradas_emergencia,
                    'trades_rejeitados': self.trades_rejeitados,
                    'alertas_recentes': len([a for a in self.alertas_enviados if 
                                           (datetime.now() - a.timestamp).total_seconds() < 3600])
                }
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao obter status de risco: {str(e)}")
            return {'erro': str(e)}
    
    async def resetar_modo_emergencia(self):
        """Reseta o modo emerg√™ncia (uso manual)"""
        try:
            self.modo_emergencia = False
            self.logger.info("‚úÖ Modo emerg√™ncia resetado manualmente")
            
            if self.alertas_manager:
                await self.alertas_manager.alerta_info(
                    "Modo Emerg√™ncia Resetado",
                    "O modo emerg√™ncia foi resetado manualmente. Sistema voltando ao normal."
                )
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao resetar modo emerg√™ncia: {str(e)}")
    
    async def ajustar_parametros(self, novos_parametros: Dict[str, Any]):
        """
        Ajusta par√¢metros de risco em tempo real
        
        Args:
            novos_parametros: Dicion√°rio com novos par√¢metros
        """
        try:
            parametros_alterados = []
            
            for chave, valor in novos_parametros.items():
                if hasattr(self.parametros, chave):
                    valor_anterior = getattr(self.parametros, chave)
                    setattr(self.parametros, chave, Decimal(str(valor)))
                    parametros_alterados.append(f"{chave}: {valor_anterior} ‚Üí {valor}")
            
            if parametros_alterados:
                self.logger.info("‚öôÔ∏è Par√¢metros de risco ajustados:")
                for alteracao in parametros_alterados:
                    self.logger.info(f"  ‚Ä¢ {alteracao}")
                
                if self.alertas_manager:
                    await self.alertas_manager.alerta_info(
                        "Par√¢metros de Risco Ajustados",
                        f"Par√¢metros alterados:\n" + "\n".join(parametros_alterados)
                    )
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao ajustar par√¢metros: {str(e)}")


def criar_gestor_risco(config: Dict[str, Any] = None) -> GestorRisco:
    """
    Cria inst√¢ncia do gestor de risco
    
    Args:
        config: Configura√ß√£o do gestor de risco
        
    Returns:
        Inst√¢ncia do gestor de risco
    """
    if config is None:
        config = {}
