"""
Painel Web de Monitoramento - CryptoTradeBotGlobal
Sistema de Trading de Criptomoedas - Portugu√™s Brasileiro
"""

import streamlit as st
import plotly.graph_objects as go
import plotly.express as px
import pandas as pd
import asyncio
import json
import time
from datetime import datetime, timedelta
from typing import Dict, List, Any
import os
import sys

# Adicionar o diret√≥rio src ao path
sys.path.append(os.path.join(os.path.dirname(__file__), '.'))

from src.adapters.binance_real import criar_adaptador_binance_real
from src.strategies.estrategia_sma_simples import criar_estrategia_sma_simples
from src.strategies.estrategia_rsi import criar_estrategia_rsi
from src.strategies.estrategia_bollinger import criar_estrategia_bollinger
from src.core.risco import criar_gerenciador_risco
from src.utils.logger import configurar_logger


class PainelTradingWeb:
    """Painel web para monitoramento do sistema de trading"""
    
    def __init__(self):
        """Inicializa o painel web"""
        self.configurar_pagina()
        self.inicializar_componentes()
        
        # Estado da sess√£o
        if 'dados_historicos' not in st.session_state:
            st.session_state.dados_historicos = []
        if 'sistema_ativo' not in st.session_state:
            st.session_state.sistema_ativo = False
        if 'ultima_atualizacao' not in st.session_state:
            st.session_state.ultima_atualizacao = None
    
    def configurar_pagina(self):
        """Configura a p√°gina do Streamlit"""
        st.set_page_config(
            page_title="CryptoTradeBotGlobal - Painel de Controle",
            page_icon="ü§ñ",
            layout="wide",
            initial_sidebar_state="expanded"
        )
        
        # CSS customizado
        st.markdown("""
        <style>
        .main-header {
            font-size: 2.5rem;
            color: #1f77b4;
            text-align: center;
            margin-bottom: 2rem;
        }
        .metric-card {
            background-color: #f0f2f6;
            padding: 1rem;
            border-radius: 0.5rem;
            border-left: 4px solid #1f77b4;
        }
        .status-online {
            color: #28a745;
            font-weight: bold;
        }
        .status-offline {
            color: #dc3545;
            font-weight: bold;
        }
        .alert-success {
            background-color: #d4edda;
            border: 1px solid #c3e6cb;
            color: #155724;
            padding: 0.75rem;
            border-radius: 0.25rem;
            margin: 1rem 0;
        }
        .alert-warning {
            background-color: #fff3cd;
            border: 1px solid #ffeaa7;
            color: #856404;
            padding: 0.75rem;
            border-radius: 0.25rem;
            margin: 1rem 0;
        }
        .alert-danger {
            background-color: #f8d7da;
            border: 1px solid #f5c6cb;
            color: #721c24;
            padding: 0.75rem;
            border-radius: 0.25rem;
            margin: 1rem 0;
        }
        </style>
        """, unsafe_allow_html=True)
    
    def inicializar_componentes(self):
        """Inicializa os componentes do sistema"""
        try:
            # Configurar logging
            configurar_logger(nivel='INFO')
            
            # Inicializar adaptador
            self.adaptador = criar_adaptador_binance_real({
                'testnet': True,
                'modo_simulacao': True,
                'api_key': 'demo_key',
                'api_secret': 'demo_secret'
            })
            
            # Inicializar estrat√©gias
            self.estrategia_sma = criar_estrategia_sma_simples({
                'simbolos': ['BTC/USDT', 'ETH/USDT']
            })
            
            self.estrategia_rsi = criar_estrategia_rsi({
                'simbolos': ['BTC/USDT', 'ETH/USDT']
            })
            
            self.estrategia_bollinger = criar_estrategia_bollinger({
                'simbolos': ['BTC/USDT', 'ETH/USDT']
            })
            
            # Inicializar gerenciador de risco
            self.gerenciador_risco = criar_gerenciador_risco()
            
        except Exception as e:
            st.error(f"‚ùå Erro ao inicializar componentes: {str(e)}")
    
    def executar(self):
        """Executa o painel principal"""
        # Cabe√ßalho
        st.markdown('<h1 class="main-header">ü§ñ CryptoTradeBotGlobal</h1>', unsafe_allow_html=True)
        st.markdown('<p style="text-align: center; color: #666;">Painel de Controle e Monitoramento</p>', unsafe_allow_html=True)
        
        # Sidebar com controles
        self.renderizar_sidebar()
        
        # Conte√∫do principal
        self.renderizar_conteudo_principal()
    
    def renderizar_sidebar(self):
        """Renderiza a barra lateral com controles"""
        st.sidebar.header("üéõÔ∏è Controles do Sistema")
        
        # Status do sistema
        status = "üü¢ Online" if st.session_state.sistema_ativo else "üî¥ Offline"
        st.sidebar.markdown(f"**Status:** {status}")
        
        # Controles principais
        col1, col2 = st.sidebar.columns(2)
        
        with col1:
            if st.button("‚ñ∂Ô∏è Iniciar", disabled=st.session_state.sistema_ativo):
                self.iniciar_sistema()
        
        with col2:
            if st.button("‚èπÔ∏è Parar", disabled=not st.session_state.sistema_ativo):
                self.parar_sistema()
        
        st.sidebar.divider()
        
        # Configura√ß√µes
        st.sidebar.header("‚öôÔ∏è Configura√ß√µes")
        
        # Sele√ß√£o de estrat√©gias
        estrategias_ativas = st.sidebar.multiselect(
            "Estrat√©gias Ativas",
            ["SMA", "RSI", "Bollinger"],
            default=["SMA"]
        )
        
        # S√≠mbolos para monitorar
        simbolos_monitorados = st.sidebar.multiselect(
            "S√≠mbolos",
            ["BTC/USDT", "ETH/USDT", "BNB/USDT", "ADA/USDT"],
            default=["BTC/USDT", "ETH/USDT"]
        )
        
        # Configura√ß√µes de risco
        st.sidebar.subheader("üõ°Ô∏è Gerenciamento de Risco")
        
        stop_loss = st.sidebar.slider(
            "Stop Loss (%)",
            min_value=1.0,
            max_value=10.0,
            value=5.0,
            step=0.5
        )
        
        max_drawdown = st.sidebar.slider(
            "Max Drawdown (%)",
            min_value=5.0,
            max_value=30.0,
            value=15.0,
            step=1.0
        )
        
        # Bot√£o de atualiza√ß√£o
        st.sidebar.divider()
        if st.sidebar.button("üîÑ Atualizar Dados"):
            self.atualizar_dados()
        
        # √öltima atualiza√ß√£o
        if st.session_state.ultima_atualizacao:
            st.sidebar.caption(f"√öltima atualiza√ß√£o: {st.session_state.ultima_atualizacao.strftime('%H:%M:%S')}")
    
    def renderizar_conteudo_principal(self):
        """Renderiza o conte√∫do principal do painel"""
        # Abas principais
        tab1, tab2, tab3, tab4, tab5 = st.tabs([
            "üìä Dashboard", 
            "üíπ Trading", 
            "üõ°Ô∏è Risco", 
            "üìà Estrat√©gias", 
            "üìã Logs"
        ])
        
        with tab1:
            self.renderizar_dashboard()
        
        with tab2:
            self.renderizar_trading()
        
        with tab3:
            self.renderizar_risco()
        
        with tab4:
            self.renderizar_estrategias()
        
        with tab5:
            self.renderizar_logs()
    
    def renderizar_dashboard(self):
        """Renderiza o dashboard principal"""
        st.header("üìä Dashboard Geral")
        
        # M√©tricas principais
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                label="üí∞ Portfolio",
                value="$10,000.00",
                delta="$0.00 (0.00%)"
            )
        
        with col2:
            st.metric(
                label="üìà P&L Hoje",
                value="$0.00",
                delta="0.00%"
            )
        
        with col3:
            st.metric(
                label="üéØ Trades",
                value="0",
                delta="0 hoje"
            )
        
        with col4:
            st.metric(
                label="‚ö†Ô∏è Alertas",
                value="0",
                delta="0 ativos"
            )
        
        st.divider()
        
        # Gr√°ficos
        col1, col2 = st.columns(2)
        
        with col1:
            self.renderizar_grafico_precos()
        
        with col2:
            self.renderizar_grafico_portfolio()
        
        # Tabela de posi√ß√µes
        st.subheader("üìã Posi√ß√µes Abertas")
        
        # Dados simulados
        posicoes_df = pd.DataFrame({
            'S√≠mbolo': ['BTC/USDT', 'ETH/USDT'],
            'Lado': ['LONG', 'LONG'],
            'Quantidade': [0.0, 0.0],
            'Pre√ßo Entrada': [0.0, 0.0],
            'Pre√ßo Atual': [50000.0, 3000.0],
            'P&L': [0.0, 0.0],
            'P&L %': [0.0, 0.0]
        })
        
        st.dataframe(posicoes_df, use_container_width=True)
    
    def renderizar_grafico_precos(self):
        """Renderiza gr√°fico de pre√ßos"""
        st.subheader("üíπ Pre√ßos em Tempo Real")
        
        # Dados simulados
        dates = pd.date_range(start='2025-01-01', periods=100, freq='H')
        btc_prices = 50000 + (pd.Series(range(100)) * 10) + (pd.Series(range(100)) * 0.1).apply(lambda x: x * (-1) ** int(x))
        
        fig = go.Figure()
        fig.add_trace(go.Scatter(
            x=dates,
            y=btc_prices,
            mode='lines',
            name='BTC/USDT',
            line=dict(color='#f7931a', width=2)
        ))
        
        fig.update_layout(
            title="BTC/USDT - √öltimas 24h",
            xaxis_title="Tempo",
            yaxis_title="Pre√ßo (USDT)",
            height=400,
            showlegend=True
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    def renderizar_grafico_portfolio(self):
        """Renderiza gr√°fico do portfolio"""
        st.subheader("üìä Evolu√ß√£o do Portfolio")
        
        # Dados simulados
        dates = pd.date_range(start='2025-01-01', periods=30, freq='D')
        portfolio_values = [10000 + (i * 50) for i in range(30)]
        
        fig = go.Figure()
        fig.add_trace(go.Scatter(
            x=dates,
            y=portfolio_values,
            mode='lines+markers',
            name='Portfolio',
            line=dict(color='#1f77b4', width=3),
            fill='tonexty'
        ))
        
        fig.update_layout(
            title="Evolu√ß√£o do Portfolio (30 dias)",
            xaxis_title="Data",
            yaxis_title="Valor (USD)",
            height=400,
            showlegend=False
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    def renderizar_trading(self):
        """Renderiza a se√ß√£o de trading"""
        st.header("üíπ Trading")
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.subheader("üìã Hist√≥rico de Ordens")
            
            # Dados simulados
            ordens_df = pd.DataFrame({
                'Timestamp': [datetime.now() - timedelta(hours=i) for i in range(5)],
                'S√≠mbolo': ['BTC/USDT', 'ETH/USDT', 'BTC/USDT', 'ETH/USDT', 'BTC/USDT'],
                'Lado': ['COMPRAR', 'VENDER', 'COMPRAR', 'COMPRAR', 'VENDER'],
                'Quantidade': [0.001, 0.1, 0.002, 0.05, 0.001],
                'Pre√ßo': [50000, 3000, 49800, 3100, 50200],
                'Status': ['EXECUTADA', 'EXECUTADA', 'EXECUTADA', 'EXECUTADA', 'EXECUTADA'],
                'P&L': [0, -10, 4, -5, 2]
            })
            
            st.dataframe(ordens_df, use_container_width=True)
        
        with col2:
            st.subheader("üéØ Estat√≠sticas")
            
            st.metric("Total de Ordens", "5")
            st.metric("Taxa de Sucesso", "100%")
            st.metric("Volume Negociado", "$500.00")
            st.metric("Melhor Trade", "$4.00")
            st.metric("Pior Trade", "-$10.00")
            
            st.divider()
            
            # Controles manuais
            st.subheader("üéÆ Controle Manual")
            
            simbolo_manual = st.selectbox("S√≠mbolo", ["BTC/USDT", "ETH/USDT"])
            acao_manual = st.selectbox("A√ß√£o", ["COMPRAR", "VENDER"])
            quantidade_manual = st.number_input("Quantidade", min_value=0.001, value=0.001, step=0.001)
            
            if st.button("üì§ Executar Ordem Manual"):
                st.success(f"‚úÖ Ordem {acao_manual} {quantidade_manual} {simbolo_manual} enviada!")
    
    def renderizar_risco(self):
        """Renderiza a se√ß√£o de gerenciamento de risco"""
        st.header("üõ°Ô∏è Gerenciamento de Risco")
        
        # Status do gerenciamento de risco
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown('<div class="alert-success">‚úÖ Sistema de Risco Ativo</div>', unsafe_allow_html=True)
        
        with col2:
            st.markdown('<div class="alert-success">‚úÖ Dentro dos Limites</div>', unsafe_allow_html=True)
        
        with col3:
            st.markdown('<div class="alert-success">‚úÖ Sem Alertas Cr√≠ticos</div>', unsafe_allow_html=True)
        
        st.divider()
        
        # M√©tricas de risco
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                label="üõë Stop Loss",
                value="5.0%",
                delta="Configurado"
            )
        
        with col2:
            st.metric(
                label="üìâ Drawdown Atual",
                value="0.0%",
                delta="Limite: 15.0%"
            )
        
        with col3:
            st.metric(
                label="üí∏ Perda Di√°ria",
                value="$0.00",
                delta="Limite: $500.00"
            )
        
        with col4:
            st.metric(
                label="‚ö†Ô∏è Alertas Ativos",
                value="0",
                delta="Nenhum alerta"
            )
        
        # Gr√°fico de risco
        st.subheader("üìä Monitoramento de Risco")
        
        # Dados simulados
        risk_dates = pd.date_range(start='2025-01-01', periods=24, freq='H')
        drawdown_values = [abs(i * 0.1) % 5 for i in range(24)]
        
        fig = go.Figure()
        fig.add_trace(go.Scatter(
            x=risk_dates,
            y=drawdown_values,
            mode='lines+markers',
            name='Drawdown (%)',
            line=dict(color='#dc3545', width=2)
        ))
        
        # Linha de limite
        fig.add_hline(y=15, line_dash="dash", line_color="red", annotation_text="Limite M√°ximo")
        
        fig.update_layout(
            title="Drawdown nas √öltimas 24h",
            xaxis_title="Tempo",
            yaxis_title="Drawdown (%)",
            height=400
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Hist√≥rico de alertas
        st.subheader("üìã Hist√≥rico de Alertas")
        
        alertas_df = pd.DataFrame({
            'Timestamp': [datetime.now() - timedelta(hours=i) for i in range(3)],
            'Tipo': ['INFO', 'WARNING', 'INFO'],
            'Mensagem': [
                'Sistema de risco inicializado',
                'Drawdown aproximando do limite (12%)',
                'Ordem validada com sucesso'
            ],
            'A√ß√£o': ['Nenhuma', 'Monitorar', 'Nenhuma']
        })
        
        st.dataframe(alertas_df, use_container_width=True)
    
    def renderizar_estrategias(self):
        """Renderiza a se√ß√£o de estrat√©gias"""
        st.header("üìà Estrat√©gias de Trading")
        
        # Abas para cada estrat√©gia
        tab_sma, tab_rsi, tab_bollinger = st.tabs(["üìä SMA", "üìà RSI", "üìâ Bollinger"])
        
        with tab_sma:
            self.renderizar_estrategia_sma()
        
        with tab_rsi:
            self.renderizar_estrategia_rsi()
        
        with tab_bollinger:
            self.renderizar_estrategia_bollinger()
    
    def renderizar_estrategia_sma(self):
        """Renderiza detalhes da estrat√©gia SMA"""
        st.subheader("üìä Estrat√©gia SMA (Simple Moving Average)")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("Status", "üü¢ Ativa")
            st.metric("Sinais Gerados", "0")
        
        with col2:
            st.metric("SMA R√°pida", "5 per√≠odos")
            st.metric("SMA Lenta", "10 per√≠odos")
        
        with col3:
            st.metric("S√≠mbolos", "2")
            st.metric("√öltima An√°lise", "Agora")
        
        # Gr√°fico SMA
        st.subheader("üìà Gr√°fico SMA")
        
        # Dados simulados
        dates = pd.date_range(start='2025-01-01', periods=50, freq='H')
        prices = [50000 + (i * 20) + (i % 10 * 100) for i in range(50)]
        sma_fast = pd.Series(prices).rolling(window=5).mean()
        sma_slow = pd.Series(prices).rolling(window=10).mean()
        
        fig = go.Figure()
        fig.add_trace(go.Scatter(x=dates, y=prices, mode='lines', name='Pre√ßo', line=dict(color='blue')))
        fig.add_trace(go.Scatter(x=dates, y=sma_fast, mode='lines', name='SMA 5', line=dict(color='orange')))
        fig.add_trace(go.Scatter(x=dates, y=sma_slow, mode='lines', name='SMA 10', line=dict(color='red')))
        
        fig.update_layout(title="BTC/USDT com SMAs", height=400)
        st.plotly_chart(fig, use_container_width=True)
    
    def renderizar_estrategia_rsi(self):
        """Renderiza detalhes da estrat√©gia RSI"""
        st.subheader("üìà Estrat√©gia RSI (Relative Strength Index)")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("Status", "üü¢ Ativa")
            st.metric("RSI Atual", "45.2")
        
        with col2:
            st.metric("Sobrecompra", "70")
            st.metric("Sobrevenda", "30")
        
        with col3:
            st.metric("Per√≠odo", "14")
            st.metric("Sinais", "0")
        
        # Gr√°fico RSI
        st.subheader("üìä Gr√°fico RSI")
        
        dates = pd.date_range(start='2025-01-01', periods=50, freq='H')
        rsi_values = [30 + (i % 40) + (i * 0.5) % 20 for i in range(50)]
        
        fig = go.Figure()
        fig.add_trace(go.Scatter(x=dates, y=rsi_values, mode='lines', name='RSI', line=dict(color='purple')))
        fig.add_hline(y=70, line_dash="dash", line_color="red", annotation_text="Sobrecompra")
        fig.add_hline(y=30, line_dash="dash", line_color="green", annotation_text="Sobrevenda")
        
        fig.update_layout(title="RSI - BTC/USDT", yaxis=dict(range=[0, 100]), height=400)
        st.plotly_chart(fig, use_container_width=True)
    
    def renderizar_estrategia_bollinger(self):
        """Renderiza detalhes da estrat√©gia Bollinger"""
        st.subheader("üìâ Estrat√©gia Bandas de Bollinger")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("Status", "üü¢ Ativa")
            st.metric("Per√≠odo", "20")
        
        with col2:
            st.metric("Desvios Padr√£o", "2.0")
            st.metric("Modo", "Revers√£o")
        
        with col3:
            st.metric("Largura Banda", "$2,500")
            st.metric("Posi√ß√£o", "Meio")
        
        # Gr√°fico Bollinger
        st.subheader("üìà Gr√°fico Bandas de Bollinger")
        
        dates = pd.date_range(start='2025-01-01', periods=50, freq='H')
        prices = [50000 + (i * 20) + (i % 10 * 200) for i in range(50)]
        sma = pd.Series(prices).rolling(window=20).mean()
        std = pd.Series(prices).rolling(window=20).std()
        upper_band = sma + (std * 2)
        lower_band = sma - (std * 2)
        
        fig = go.Figure()
        fig.add_trace(go.Scatter(x=dates, y=prices, mode='lines', name='Pre√ßo', line=dict(color='blue')))
        fig.add_trace(go.Scatter(x=dates, y=upper_band, mode='lines', name='Banda Superior', line=dict(color='red')))
        fig.add_trace(go.Scatter(x=dates, y=sma, mode='lines', name='M√©dia', line=dict(color='orange')))
        fig.add_trace(go.Scatter(x=dates, y=lower_band, mode='lines', name='Banda Inferior', line=dict(color='green')))
        
        fig.update_layout(title="Bandas de Bollinger - BTC/USDT", height=400)
        st.plotly_chart(fig, use_container_width=True)
    
    def renderizar_logs(self):
        """Renderiza a se√ß√£o de logs"""
        st.header("üìã Logs do Sistema")
        
        # Filtros
        col1, col2, col3 = st.columns(3)
        
        with col1:
            nivel_log = st.selectbox("N√≠vel", ["TODOS", "INFO", "WARNING", "ERROR"])
        
        with col2:
            modulo_log = st.selectbox("M√≥dulo", ["TODOS", "TRADING", "RISCO", "ESTRATEGIA"])
        
        with col3:
            if st.button("üîÑ Atualizar Logs"):
                st.rerun()
        
        # Logs simulados
        logs_data = [
            {"timestamp": datetime.now() - timedelta(seconds=i*30), 
             "nivel": ["INFO", "WARNING", "ERROR"][i % 3],
             "modulo": ["TRADING", "RISCO", "ESTRATEGIA"][i % 3],
             "mensagem": f"Mensagem de log {i+1} - Sistema funcionando normalmente"}
            for i in range(20)
        ]
        
        logs_df = pd.DataFrame(logs_data)
        
        # Aplicar filtros
        if nivel_log != "TODOS":
            logs_df = logs_df[logs_df['nivel'] == nivel_log]
        
        if modulo_log != "TODOS":
            logs_df = logs_df[logs_df['modulo'] == modulo_log]
        
        # Colorir logs por n√≠vel
        def colorir_linha(row):
            if row['nivel'] == 'ERROR':
                return ['background-color: #f8d7da'] * len(row)
            elif row['nivel'] == 'WARNING':
                return ['background-color: #fff3cd'] * len(row)
            else:
                return [''] * len(row)
        
        st.dataframe(
            logs_df.style.apply(colorir_linha, axis=1),
            use_container_width=True,
            height=400
        )
    
    def iniciar_sistema(self):
        """Inicia o sistema de trading"""
        st.session_state.sistema_ativo = True
        st.success("‚úÖ Sistema iniciado com sucesso!")
        st.rerun()
    
    def parar_sistema(self):
        """Para o sistema de trading"""
        st.session_state.sistema_ativo = False
        st.info("‚èπÔ∏è Sistema parado")
        st.rerun()
    
    def atualizar_dados(self):
        """Atualiza os dados do painel"""
        st.session_state.ultima_atualizacao = datetime.now()
        st.success("üîÑ Dados atualizados!")
        time.sleep(1)
        st.rerun()


def main():
    """Fun√ß√£o principal do painel web"""
    try:
        painel = PainelTradingWeb()
        painel.executar()
        
    except Exception as e:
        st.error(f"‚ùå Erro cr√≠tico no painel: {str(e)}")
        st.exception(e)


if __name__ == "__main__":
    main()
